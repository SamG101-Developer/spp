#ifndef FUNCTION_CALL_ARGUMENT_AST_HPP
#define FUNCTION_CALL_ARGUMENT_AST_HPP

#include <spp/asts/ast.hpp>
#include <spp/asts/_fwd.hpp>


/**
 * The FunctionCallArgumentAst is the base class representing an argument in a function call. It is inherited into the
 * "positional" and "keyword" variants.
 */
struct spp::asts::FunctionCallArgumentAst : Ast {
    using Ast::Ast;

    /**
     * The convention on the argument being passed into the function call. Conventions are applicable to both positional
     * and keyword arguments.
     */
    std::unique_ptr<ConventionAst> conv;

    /**
     * The expression that is being passed as the argument to the function call. Both positional and keyword arguments
     * have a value.
     */
    std::unique_ptr<ExpressionAst> val;

    /**
     * Construct the FunctionCallArgumentAst with the arguments matching the members.
     * @param conv The convention on the argument being passed into the function call.
     * @param val The expression that is being passed as the argument to the function call.
     */
    FunctionCallArgumentAst(
        decltype(conv) &&conv,
        decltype(val) &&val);

private:
    /**
     * When an argument is generated by the compiler for the "self" type being injected into a method call, the type is
     * passed explicitly to speed up inference.
     */
    std::unique_ptr<TypeAst> m_self_type;
};


#endif //FUNCTION_CALL_ARGUMENT_AST_HPP
