#include <spp/analyse/errors/semantic_error.hpp>
#include <spp/analyse/errors/semantic_error_builder.hpp>
#include <spp/analyse/scopes/scope_manager.hpp>
#include <spp/analyse/utils/type_utils.hpp>
#include <spp/asts/annotation_ast.hpp>
#include <spp/asts/class_implementation_ast.hpp>
#include <spp/asts/class_member_ast.hpp>
#include <spp/asts/class_prototype_ast.hpp>
#include <spp/asts/convention_ast.hpp>
#include <spp/asts/identifier_ast.hpp>
#include <spp/asts/generic_argument_group_ast.hpp>
#include <spp/asts/generic_parameter_ast.hpp>
#include <spp/asts/sup_implementation_ast.hpp>
#include <spp/asts/sup_prototype_extension_ast.hpp>
#include <spp/asts/token_ast.hpp>
#include <spp/asts/type_ast.hpp>
#include <spp/asts/type_identifier_ast.hpp>
#include <spp/asts/type_statement_ast.hpp>
#include <spp/asts/generic_parameter_group_ast.hpp>
#include <spp/pch.hpp>

#include <genex/views/for_each.hpp>


spp::asts::TypeStatementAst::TypeStatementAst(
    decltype(annotations) &&annotations,
    decltype(tok_type) &&tok_type,
    decltype(new_type) new_type,
    decltype(generic_param_group) &&generic_param_group,
    decltype(tok_assign) &&tok_assign,
    decltype(old_type) old_type) :
    annotations(std::move(annotations)),
    tok_type(std::move(tok_type)),
    new_type(std::move(new_type)),
    generic_param_group(std::move(generic_param_group)),
    tok_assign(std::move(tok_assign)),
    old_type(std::move(old_type)) {
    SPP_SET_AST_TO_DEFAULT_IF_NULLPTR(this->tok_type, lex::SppTokenType::KW_TYPE, "type");
    SPP_SET_AST_TO_DEFAULT_IF_NULLPTR(this->generic_param_group);
}


spp::asts::TypeStatementAst::~TypeStatementAst() = default;


auto spp::asts::TypeStatementAst::pos_start() const -> std::size_t {
    return tok_type->pos_start();
}


auto spp::asts::TypeStatementAst::pos_end() const -> std::size_t {
    return old_type->pos_end();
}


auto spp::asts::TypeStatementAst::clone() const -> std::unique_ptr<Ast> {
    auto ast = std::make_unique<TypeStatementAst>(
        ast_clone_vec(annotations),
        ast_clone(tok_type),
        ast_clone(new_type),
        ast_clone(generic_param_group),
        ast_clone(tok_assign),
        ast_clone(old_type));
    ast->m_ctx = m_ctx;
    ast->m_scope = m_scope;
    ast->m_visibility = m_visibility;
    ast->annotations | genex::views::for_each([ast=ast.get()](auto &&a) { a->m_ctx = ast; });
    return ast;
}


spp::asts::TypeStatementAst::operator std::string() const {
    SPP_STRING_START;
    SPP_STRING_EXTEND(annotations);
    SPP_STRING_APPEND(tok_type);
    SPP_STRING_APPEND(new_type);
    SPP_STRING_APPEND(generic_param_group);
    SPP_STRING_APPEND(tok_assign);
    SPP_STRING_APPEND(old_type);
    SPP_STRING_END;
}


auto spp::asts::TypeStatementAst::print(meta::AstPrinter &printer) const -> std::string {
    SPP_PRINT_START;
    SPP_PRINT_EXTEND(annotations);
    SPP_PRINT_APPEND(tok_type);
    SPP_PRINT_APPEND(new_type);
    SPP_PRINT_APPEND(generic_param_group);
    SPP_PRINT_APPEND(tok_assign);
    SPP_PRINT_APPEND(old_type);
    SPP_PRINT_END;
}


auto spp::asts::TypeStatementAst::m_skip_all_scopes(
    ScopeManager *sm)
    -> void {
    // Skip all scopes generated by this statement.
    sm->move_to_next_scope();
    sm->move_to_next_scope();
    sm->move_to_next_scope();
    sm->move_out_of_current_scope();
    sm->move_out_of_current_scope();
}


auto spp::asts::TypeStatementAst::stage_1_pre_process(
    Ast *ctx)
    -> void {
    // Pre-process the annotations.
    Ast::stage_1_pre_process(ctx);
    annotations | genex::views::for_each([this](auto &&x) { x->stage_1_pre_process(this); });
}


auto spp::asts::TypeStatementAst::stage_2_gen_top_level_scopes(
    ScopeManager *sm,
    mixins::CompilerMetaData *meta)
    -> void {
    // Run top level scope generation for the annotations.
    Ast::stage_2_gen_top_level_scopes(sm, nullptr);
    annotations | genex::views::for_each([sm, meta](auto &&x) { x->stage_2_gen_top_level_scopes(sm, meta); });

    // Check there are no conventions on the old type.
    if (auto &&conv = old_type->get_convention(); conv != nullptr) {
        analyse::errors::SemanticErrorBuilder<analyse::errors::SppSecondClassBorrowViolationError>().with_args(
            *old_type, *conv, "use statement's old type").with_scopes({sm->current_scope}).raise();
    }

    // Check there are no conventions on the new type.
    // if (auto &&conv = new_type->get_convention(); conv != nullptr) {
    //     analyse::errors::SemanticErrorBuilder<analyse::errors::SppSecondClassBorrowViolationError>().with_args(
    //         *new_type, *conv, "use statement's new type").with_scopes({sm->current_scope}).raise();
    // }

    // Create a class for the alias type, and generate it.
    auto cls_ast = std::make_unique<ClassPrototypeAst>(SPP_NO_ANNOTATIONS, nullptr, new_type, ast_clone(generic_param_group), nullptr);
    cls_ast->m_for_alias = true;
    cls_ast->m_visibility = std::make_pair(m_visibility.first, m_visibility.second);

    // Update the type statement's attributes.
    meta->save();
    m_alias_sym = dynamic_cast<analyse::scopes::AliasSymbol*>(meta->cls_sym);
    m_generated_cls_ast = std::move(cls_ast);
    meta->restore();

    // Create a new scope for the type statement.
    auto scope_name = analyse::scopes::ScopeBlockName("<type-stmt#" + static_cast<std::string>(*new_type) + "#" + std::to_string(pos_start()) + ">");
    sm->create_and_move_into_new_scope(std::move(scope_name), this);
    sm->move_out_of_current_scope();
    m_generated = true;
}


auto spp::asts::TypeStatementAst::stage_3_gen_top_level_aliases(
    ScopeManager *sm,
    mixins::CompilerMetaData *meta)
    -> void {
    // Skip the class scope, and enter the type statement scope.
    sm->move_to_next_scope();
    sm->move_to_next_scope();

    // Analyse the old type without generics, to ensure the base type exists.
    meta->save();
    meta->skip_type_analysis_generic_checks = true;
    old_type->without_generics()->stage_7_analyse_semantics(sm, meta);
    meta->restore();

    // Load the generics into the class and type-statement scopes.
    auto tm = ScopeManager(
        sm->global_scope, sm->current_scope->get_type_symbol(*old_type->without_generics())->scope);
    for (auto &&generic_arg : GenericArgumentGroupAst::from_params(*generic_param_group)->args) {
        const auto generic_sym = analyse::utils::type_utils::create_generic_sym(*generic_arg, *sm, meta, &tm);
        if (const auto generic_type_sym = std::dynamic_pointer_cast<analyse::scopes::TypeSymbol>(generic_sym)) {
            sm->current_scope->add_type_symbol(generic_type_sym);
            m_generated_cls_ast->m_scope->add_type_symbol(generic_type_sym);
        }
        else if (const auto generic_comp_sym = std::dynamic_pointer_cast<analyse::scopes::VariableSymbol>(generic_sym)) {
            sm->current_scope->add_var_symbol(generic_comp_sym);
            m_generated_cls_ast->m_scope->add_var_symbol(generic_comp_sym);
        }
    }

    // Check the (full) old type is valid, and get the new symbol.
    old_type->stage_7_analyse_semantics(sm, meta);
    m_alias_sym->old_sym = sm->current_scope->get_type_symbol(*old_type);
    dynamic_cast<analyse::scopes::AliasSymbol*>(m_alias_sym->generic_impl)->old_sym = m_alias_sym->old_sym;

    // Create a "sup" block, to allow attribute and method access.
    m_generated_ext_ast = std::make_unique<SupPrototypeExtensionAst>(
        nullptr, generic_param_group->opt_to_req(), new_type, nullptr, old_type, nullptr);
    m_generated_ext_ast->stage_2_gen_top_level_scopes(sm, meta);
    sm->move_out_of_current_scope();
}


auto spp::asts::TypeStatementAst::stage_4_qualify_types(
    ScopeManager *sm,
    mixins::CompilerMetaData *meta)
    -> void {
    // Skip the class scope, and enter the type statement scope.
    sm->move_to_next_scope();
    sm->move_to_next_scope();

    // Get the old type's symbol, without generics.
    const auto stripped_old_sym = sm->current_scope->get_type_symbol(*old_type->without_generics(), false, true);
    if (not stripped_old_sym->is_generic) {
        auto tm = ScopeManager(sm->global_scope, stripped_old_sym->scope_defined_in);

        // Qualify the generics, and the overall type.
        generic_param_group->stage_4_qualify_types(sm, meta);
        old_type->stage_4_qualify_types(sm, meta);
        old_type->stage_7_analyse_semantics(sm, meta);

        // Update the parameter groups on the generated ASTs.
        m_generated_cls_ast->generic_param_group = ast_clone(generic_param_group);
        m_generated_ext_ast->generic_param_group = generic_param_group->opt_to_req();
        m_alias_sym->old_sym = sm->current_scope->get_type_symbol(*old_type);
        dynamic_cast<analyse::scopes::AliasSymbol*>(m_alias_sym->generic_impl)->old_sym = m_alias_sym->old_sym;
    }

    // Exit the scopes (skipping the sup-ext block's scope).
    sm->move_to_next_scope();
    sm->move_out_of_current_scope();
    sm->move_out_of_current_scope();
}


auto spp::asts::TypeStatementAst::stage_5_load_super_scopes(
    ScopeManager *sm,
    mixins::CompilerMetaData *)
    -> void {
    // Skip all scopes.
    m_skip_all_scopes(sm);
}


auto spp::asts::TypeStatementAst::stage_6_pre_analyse_semantics(
    ScopeManager *sm,
    mixins::CompilerMetaData *)
    -> void {
    // Skip all scopes.
    m_skip_all_scopes(sm);
}


auto spp::asts::TypeStatementAst::stage_7_analyse_semantics(
    ScopeManager *sm,
    mixins::CompilerMetaData *meta)
    -> void {
    // If this is a pre-generated AST (mod/sup context), skip any generation steps.
    if (m_generated) {
        m_skip_all_scopes(sm);
        return;
    }

    auto iter_copy_1 = sm->iter();
    auto iter_copy_2 = sm->iter();

    // Otherwise, run all generation steps.
    const auto current_scope = sm->current_scope;
    stage_2_gen_top_level_scopes(sm, meta);

    sm->reset(current_scope, std::move(iter_copy_1));
    stage_3_gen_top_level_aliases(sm, meta);

    sm->reset(current_scope, std::move(iter_copy_2));
    stage_4_qualify_types(sm, meta);
}


auto spp::asts::TypeStatementAst::stage_8_check_memory(
    ScopeManager *sm,
    mixins::CompilerMetaData *)
    -> void {
    // Skip all scopes.
    m_skip_all_scopes(sm);
}
